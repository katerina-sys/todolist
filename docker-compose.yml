version: "3.8"

services:
  frontend:
    image: sermalenk/skypro-front:lesson-38
    restart: always
    depends_on:
      - api
    ports:
      - "8080:80"
  api:
    build:
      context: .
    restart: always
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully

  migrations:
    build:
      context: .
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    command: python manage.py migrate

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    command: >
      sh -c "python3 manage.py runbot"
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully


  postgres:
    image: postgres:15.1-alpine
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: always
    env_file:
      - .env
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  pg_data:

