version: "3.8"

services:
  frontend:
    image:  sermalenk/skypro-front:lesson-38
    restart: always
    depends_on:
      - api
    ports:
      - "80:80"
  api:
    image:  katerinasys/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    restart: always
    environment:
      DEBUG: ${DEBUG}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
      BOT_TOKEN: ${BOT_TOKEN}
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    ports:
      - "80:80"
  bot:
    image: katerinasys/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    environment:
      DEBUG: ${DEBUG}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
      BOT_TOKEN: ${BOT_TOKEN}
    volumes:
      - ./.env:/todolist/.env
    command: python manage.py runbot

  migrations:
    image:  katerinasys/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    environment:
        DEBUG: ${DEBUG}
        POSTGRES_HOST: ${POSTGRES_HOST}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
        SECRET_KEY: ${SECRET_KEY}
        SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
        SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
        BOT_TOKEN: ${BOT_TOKEN}
    depends_on:
      postgres:
        condition: service_healthy

    command: >
      sh -c "python manage.py migrate"

  postgres:
    image: postgres:14.6-alpine
    environment:
      POSTGRES_USER:  ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: always
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  pg_data:

